name: 🚀 Frontend Docker Build - Performance Only

on:
  push:
    branches:
      - main
      - develop  
    paths:
      - 'frontend/**'
      - '.github/workflows/build-frontend.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'
  # 수동 트리거 (로드 테스트용)
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Tag suffix (e.g., -hotfix, -test)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/chat-frontend

jobs:
  build:
    name: 🔨 Build & Push Frontend Image
    runs-on: ubuntu-latest
    
    # 성능 최적화: 동시 실행 제한
    concurrency:
      group: frontend-build-${{ github.ref }}
      cancel-in-progress: true
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # 성능 최적화 설정
        driver-opts: |
          network=host
          image=moby/buildkit:latest
        platforms: linux/amd64
        
    - name: 📊 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # 브랜치별 태깅 전략
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          # 로드 테스트용 태그
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=loadtest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}
          # 수동 트리거 시 커스텀 태그
          type=raw,value={{branch}}${{ github.event.inputs.tag_suffix }},enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.title=Chat Frontend (Load Test Optimized)
          org.opencontainers.image.description=High-performance Next.js frontend for load testing
          performance.optimized=true
          loadtest.ready=true

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🚀 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
        # 성능 최적화 설정
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
        # GitHub Secrets를 통한 환경변수 주입
        build-args: |
          NODE_ENV=production
          BUILDKIT_INLINE_CACHE=1
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_ENCRYPTION_KEY=${{ secrets.NEXT_PUBLIC_ENCRYPTION_KEY }}
          NEXT_PUBLIC_PASSWORD_SALT=${{ secrets.NEXT_PUBLIC_PASSWORD_SALT }}
        
        # 멀티스테이지 빌드 최적화
        target: runner

    - name: 📋 Performance Build Summary
      run: |
        echo "## 🚀 Frontend Build Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Performance Optimizations:**" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Next.js production build with secrets baked in" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Multi-stage build for minimal size" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Node.js 18 Alpine (minimal footprint)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build cache optimization" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Ready for minimal resource usage" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment Variables (from secrets):**" >> $GITHUB_STEP_SUMMARY
        echo "- NEXT_PUBLIC_API_URL" >> $GITHUB_STEP_SUMMARY
        echo "- NEXT_PUBLIC_ENCRYPTION_KEY" >> $GITHUB_STEP_SUMMARY
        echo "- NEXT_PUBLIC_PASSWORD_SALT" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY